(let clock (Clock.new "c1"))
(set clock :bpm 340.0)

(let grid (fn (id trigger rows)
    (map rows (fn ((sample_path  triggers)) (do
        (let row_id (append id sample_path))

        (let seq (Sequencer.new (append row_id "-seq")))
        (set seq :trigger trigger)
        (set seq :triggers triggers)

        (let sample (Sample.new (append row_id "-sample")))
        (set sample :samples (samples sample_path))
        (set sample :trigger (get seq :trigger_output))

        sample
    )))
))

(let k1 (grid
    "k1"
    (get clock :output)
    (list
        '("./samples/kick.wav"  (1 0 0 0 0 1 0 0 1 0 0 0 0 0 0 1))
        '("./samples/snare.wav" (0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0))
        '("./samples/hh.wav"    (0 1 0 1 1 0 1 1 1 1 1 1 1 1 1 1))
    )
))

(let s1 (Module.new Sequencer.new "s1" (list
    (list :trigger (get clock :output))
    (list :frequencies '(:c2  :d2  :b2  :e2  :c3  :b3 ))
    (list :triggers    '(1    1    1    1    0    1   ))
)))

(let o1 (Module.new Osc.new "o1" (list
    (list :frequency (get s1 :frequency_output))
    (list :amplitude 0.08)
    (list :waveshape :pulse)
)))

(let lfo (Module.new Osc.new "lfo" (list
    (list :frequency 3.2)
    (list :amplitude 1.0)
    (list :waveshape :triangle)
)))

(let f (Module.new Filter.new "f" (list
    (list :frequency (offset (scale (get lfo :output) 500.0) 700.0))
    (list :resonance 1.0)
    (list :input (get o1 :output))
)))

(map k1 (fn (s) (output (get s :output))))
(output (get f :output))
